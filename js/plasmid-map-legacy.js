// Generated by CoffeeScript 1.12.7
(function() {
  var $, add_all_features, add_feature_from_field, add_hidden_feature, angle_from_bp, calculate_map_offset, calculate_text_anchor_point, clear_map, d3, do_expand_point_group, do_feature_expand, do_map, draw_all, draw_circle, draw_group_labels, draw_plasmid_label, draw_point_features, draw_point_groups, draw_point_labels, draw_regional_features, draw_single_feature_label, ensure_n_feature_groups, enzymes_to_show, feature_angle, fix_feature_overlap, group_feature, hide_feature, hide_feature_from_field, highlight_expanded_feature, initialize_buttons, initialize_features, initialize_map, o, objects, p, parameters, read_data, redraw_map, regional_feature_information, reset_feature_info, reset_point_group_highlight, set_feature_from_field, set_up_feature_information_box, show_feature, show_initial_features, text_for_group, update_offset, update_svg_height, x_from_polar, y_from_polar,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $ = require("jquery");

  d3 = require("d3");

  enzymes_to_show = ["AatII", "AccI", "Acc65I", "AclI", "AfeI", "AflII", "AflIII", "AgeI", "AhdI", "AleI", "AluI", "AlwNI", "AoxI", "ApaI", "ApaBI", "ApaLI", "ApoI", "AscI", "AseI", "Asi256I", "AsiSI", "AvaI", "AvaII", "AvrII", "BaeGI", "BamHI", "BanI", "BanII", "BclI", "BfaI", "BglI", "BglII", "BlpI", "BmtI", "BsaAI", "BsaBI", "BsaHI", "BsaJI", "BsaWI", "BsiEI", "BsiHKAI", "BsiWI", "BslI", "Bsp1286I", "BspEI", "BspHI", "BsrFI", "BsrGI", "BssHII", "BstAPI", "BstBI", "BstEII", "BstNI", "BstUI", "BstXI", "BstYI", "BstZ17I", "Bsu36I", "BtgI", "BthCI", "Cac8I", "ChaI", "ClaI", "CviAII", "CviKI", "CviQI", "DdeI", "DpnI", "DraI", "DraIII", "DrdI", "EaeI", "EagI", "EcoHI", "EcoNI", "EcoO109I", "EcoRI", "EcoRV", "Eco53kI", "EsaBC3I", "FatI", "FmuI", "Fnu4HI", "FseI", "FspI", "HaeI", "HaeII", "HaeIII", "HauII", "HhaI", "HinP1I", "HincII", "HindIII", "HinfI", "HpaI", "HpaII", "Hpy99I", "Hpy166II", "Hpy188I", "Hpy188III", "HpyCH4III", "HpyCH4IV", "HpyCH4V", "KasI", "KpnI", "LpnI", "MboI", "McaTI", "MfeI", "MluI", "MluCI", "MscI", "MseI", "MslI", "MspA1I", "MwoI", "NaeI", "NarI", "NciI", "NcoI", "NdeI", "NgoMIV", "NheI", "NlaIII", "NlaIV", "Nli3877I", "NotI", "NruI", "NsiI", "NspI", "PabI", "PacI", "PciI", "PflMI", "PluTI", "PmeI", "PmlI", "Ppu10I", "PpuMI", "PshAI", "PsiI", "Psp03I", "PspGI", "PspOMI", "PspXI", "PssI", "PstI", "PvuI", "PvuII", "RsaI", "RsrII", "SacI", "SacII", "SalI", "Sau96I", "SbfI", "ScaI", "SciI", "ScrFI", "SelI", "SexAI", "SfcI", "SfiI", "SfoI", "SgrAI", "SmaI", "SmlI", "SnaBI", "SpeI", "SphI", "SrfI", "Sse8647I", "SspI", "Sth302II", "StuI", "StyI", "StyD4I", "SwaI", "TaqI", "TfiI", "TseI", "Tsp45I", "TspRI", "Tth111I", "UnbI", "VpaK11AI", "XbaI", "XcmI", "XhoI", "XmaI", "XmnI", "ZraI"];

  parameters = {
    plas_map_div_id: "#plasmid-map",
    data_attr: "data",
    dyn_enz_field: "#enzyme",
    enz_remove_button: "#hide_enzyme",
    enz_add_button: "#show_enzyme",
    group_index_attr: 'group-index',
    feature_text_attr: 'feature-text',
    css_selected: 'feature-selected',
    css_featureinfo: 'feature-info',
    css_point_feature: 'feature-point-feature',
    css_regional_feature: 'regional-feature',
    css_point_group: 'feature-point-group',
    css_feature_label: 'feature-label',
    css_plasmid_label: 'plasmid-label',
    map_width: 500,
    map_height: 400,
    map_offset_x: 0,
    map_offset_y: 35,
    info_offset_y: 0,
    spacer_width: 10,
    point_group_offset: 2,
    point_group_thickness: 4,
    min_angular_dist: Math.PI / 32,
    angle_min_thickness: Math.PI / 256,
    initially_displayed_enzymes: ['AscI', 'PacI'],
    initially_display_single_cutters: true
  };

  parameters.map_radius = parameters.map_width / 4;

  parameters.arc_width = parameters.map_width / 96;

  parameters.inner_radius = parameters.map_radius - parameters.arc_width;

  parameters.outer_radius = parameters.map_radius + parameters.arc_width;

  parameters.display_height = parameters.map_height;

  objects = {
    features_displayed: {},
    features_not_displayed: {}
  };

  p = function(name) {
    if (name == null) {
      name = void 0;
    }
    if (name) {
      return parameters[name];
    } else {
      return parameters;
    }
  };

  o = function() {
    return objects;
  };

  objects.point_features = function() {
    var f_to_draw, j, k, len, point_f_to_draw, v, vi;
    f_to_draw = o().features_displayed;
    point_f_to_draw = [];
    for (k in f_to_draw) {
      v = f_to_draw[k];
      if (v[0].type === 'point') {
        for (j = 0, len = v.length; j < len; j++) {
          vi = v[j];
          point_f_to_draw.push(vi);
        }
      }
    }
    return point_f_to_draw;
  };

  objects.regional_features = function() {
    var f_to_draw, j, k, len, reg_f_to_draw, v, vi;
    f_to_draw = o().features_displayed;
    reg_f_to_draw = [];
    for (k in f_to_draw) {
      v = f_to_draw[k];
      if (v[0].type === 'regional') {
        for (j = 0, len = v.length; j < len; j++) {
          vi = v[j];
          reg_f_to_draw.push(vi);
        }
      }
    }
    return reg_f_to_draw;
  };

  angle_from_bp = function(bp) {
    return 2 * Math.PI * bp / p('pl_size');
  };

  x_from_polar = function(r, theta) {
    return r * Math.cos(theta - Math.PI / 2);
  };

  y_from_polar = function(r, theta) {
    return r * Math.sin(theta - Math.PI / 2);
  };

  feature_angle = function(d, i) {
    return angle_from_bp(d.at);
  };

  text_for_group = function(g, i) {
    var f, j, len, strrep;
    strrep = "";
    for (j = 0, len = g.length; j < len; j++) {
      f = g[j];
      if (strrep.length > 0) {
        strrep += ", ";
      } else {
        strrep += "[" + i + "]: ";
      }
      strrep += f.text + " (" + f.at + ")";
    }
    return strrep;
  };

  calculate_map_offset = function() {
    if ($("." + (p('css_featureinfo'))).length > 0) {
      return p().info_offset_y = -1 * $("." + (p('css_featureinfo'))).outerHeight(true);
    } else {
      return p().info_offset_y = 0;
    }
  };

  update_svg_height = function() {
    $("svg").attr("height", p('display_height'));
    return $(".chart").attr("style", "width: " + (p('map_width')) + "px; height: " + (p('display_height')) + "px;");
  };

  update_offset = function() {
    $("#offset-group").attr("transform", "translate(" + (p('map_width') / 2 + p('map_offset_x')) + ", " + (p('map_height') / 2 + p('map_offset_y') + p('info_offset_y')) + ")");
    p().display_height = p().map_height + p().info_offset_y;
    return update_svg_height();
  };

  reset_point_group_highlight = function() {
    return $("." + (p('css_selected'))).removeClass(p('css_selected'));
  };

  reset_feature_info = function() {
    p().info_offset_y = 0;
    update_offset();
    reset_point_group_highlight();
    return $("." + (p('css_featureinfo'))).remove();
  };

  highlight_expanded_feature = function(f_element) {
    reset_point_group_highlight();
    return $(f_element).addClass(p('css_selected'));
  };

  set_up_feature_information_box = function(text) {
    var info_el;
    $("." + (p('css_featureinfo'))).remove();
    info_el = document.createElement("div");
    info_el.className = "feature-info";
    $(p('plas_map_div_id')).prepend(info_el);
    $("." + (p('css_featureinfo'))).append('<button type="button" class="close"><i class="material-icons">highlight_off</i></button>');
    $("." + (p('css_featureinfo'))).append("<div>" + text + "</div>");
    $('button.close').click(reset_feature_info);
    calculate_map_offset();
    return update_offset();
  };

  do_feature_expand = function(f_element, text) {
    highlight_expanded_feature(f_element);
    return set_up_feature_information_box(text);
  };

  do_expand_point_group = function(event) {
    var f_element, g, gr_index, text;
    f_element = event.target;
    gr_index = parseInt($(f_element).attr(p('group_index_attr')));
    g = o().groups[gr_index];
    text = text_for_group(g, gr_index + 1);
    return do_feature_expand(f_element, text);
  };

  regional_feature_information = function(event) {
    var f_element, text;
    f_element = event.target;
    text = f_element.getAttribute(p('feature_text_attr'));
    return do_feature_expand(f_element, text);
  };

  calculate_text_anchor_point = function(angle) {
    if (angle < Math.PI) {
      return "start";
    } else {
      return "end";
    }
  };

  draw_circle = function() {
    return o().svg.append("g").selectAll("circle").data([0]).enter().append("circle").attr("cx", 0).attr("cy", 0).attr("r", p('map_radius')).style("fill", "none").style("stroke", "#000");
  };

  draw_point_features = function() {
    var f, grp, j, len, ref, results;
    grp = o().svg.append("g");
    ref = o().point_features();
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      f = ref[j];
      results.push(grp.append("path").attr("class", "line " + (p('css_point_feature'))).attr("d", d3.svg.line.radial()([[p('inner_radius'), feature_angle(f)], [p('outer_radius'), feature_angle(f)]])));
    }
    return results;
  };

  draw_regional_features = function() {
    var f, grp, j, len, ref;
    grp = o().svg.append("g");
    ref = o().regional_features();
    for (j = 0, len = ref.length; j < len; j++) {
      f = ref[j];
      grp.append("path").attr("class", "arc " + (p('css_regional_feature')) + " feature-" + f.feature_class).attr(p('feature_text_attr'), f.text + " (" + f.start + " - " + (f.start + f.length - 1) + ")").attr("d", d3.svg.arc().outerRadius(p('outer_radius')).innerRadius(p('inner_radius')).startAngle(angle_from_bp(f.start)).endAngle(angle_from_bp(f.start + f.length)));
    }
    return $("." + (p('css_regional_feature'))).mouseover(regional_feature_information);
  };

  draw_point_groups = function() {
    var g, grp, i, j, len, ref;
    grp = o().svg.append("g");
    ref = o().groups;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      g = ref[i];
      grp.append("path").attr("class", "arc " + (p('css_point_group'))).attr("group-index", i).attr("d", d3.svg.arc().outerRadius(p('outer_radius') + p('point_group_offset') + p('point_group_thickness')).innerRadius(p('outer_radius') + p('point_group_offset')).startAngle(angle_from_bp(g[0].at) - p('angle_min_thickness')).endAngle(angle_from_bp(g[g.length - 1].at) + p('angle_min_thickness')));
    }
    return $("." + (p('css_point_group'))).mouseover(do_expand_point_group);
  };

  draw_single_feature_label = function(grp, angle, text, radial_offset, text_rotation) {
    var rotation_angle, symm_angle, x, y;
    if (radial_offset == null) {
      radial_offset = 3;
    }
    if (text_rotation == null) {
      text_rotation = true;
    }
    symm_angle = angle;
    if (angle > Math.PI) {
      symm_angle = Math.abs(angle - Math.PI * 2);
    }
    rotation_angle = 0.25 * (symm_angle - Math.PI / 2) / Math.PI * 180;
    if (!text_rotation) {
      rotation_angle = 0;
    }
    if (angle > Math.PI) {
      rotation_angle *= -1;
    }
    x = x_from_polar(p('outer_radius') + radial_offset, angle);
    y = y_from_polar(p('outer_radius') + radial_offset, angle) + Math.sin(symm_angle / 2) * 8;
    return grp.append("text").attr("class", p('css_feature_label')).attr("x", x).attr("y", y).attr("text-anchor", calculate_text_anchor_point(angle)).text(text).attr("transform", "rotate(" + rotation_angle + ", " + x + ", " + y + ")");
  };

  draw_point_labels = function() {
    var angle, f, grp, j, len, ref, results, text;
    grp = o().svg.append("g");
    ref = o().point_features();
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      f = ref[j];
      if (f.grouped) {
        continue;
      }
      angle = angle_from_bp(f.at);
      text = f.text + " (" + f.at + ")";
      results.push(draw_single_feature_label(grp, angle, text));
    }
    return results;
  };

  draw_group_labels = function() {
    var angle, g, grp, i, j, len, ref, results, text;
    grp = o().svg.append("g");
    ref = o().groups;
    results = [];
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      g = ref[i];
      angle = (angle_from_bp(g[0].at) + angle_from_bp(g[g.length - 1].at)) / 2;
      text = "" + (i + 1);
      results.push(draw_single_feature_label(grp, angle, text, 10, false));
    }
    return results;
  };

  draw_plasmid_label = function() {
    var grp;
    grp = o().svg.append("g");
    return grp.append("text").attr("class", "" + (p('css_plasmid_label'))).text((p('pl_name')) + " (" + (p('pl_size')) + "bp)").attr("text-anchor", "middle");
  };

  initialize_map = function() {
    o().svg = d3.select(p('plas_map_div_id')).append("div").attr("class", "chart").style("width", (p('map_width')) + "px").style("height", (p('display_height')) + "px").append("svg").attr("width", p('map_width')).attr("height", p('display_height')).append("g").attr("id", "offset-group").attr("transform", "translate(" + (p('map_width') / 2 + p('map_offset_x')) + ", " + (p('map_height') / 2 + p('map_offset_y') + p('info_offset_y')) + ")");
    return update_offset();
  };

  clear_map = function() {
    return $('.chart').remove();
  };

  draw_all = function() {
    fix_feature_overlap();
    calculate_map_offset();
    update_offset();
    initialize_map();
    update_offset();
    draw_circle();
    draw_regional_features();
    draw_point_features();
    draw_point_groups();
    draw_point_labels();
    draw_group_labels();
    return draw_plasmid_label();
  };

  redraw_map = function() {
    clear_map();
    return draw_all();
  };

  ensure_n_feature_groups = function(n) {
    var results;
    results = [];
    while (o().groups.length < n) {
      results.push(o().groups.push([]));
    }
    return results;
  };

  group_feature = function(f, group_n) {
    if (group_n < 0) {
      f.grouped = false;
      return;
    }
    ensure_n_feature_groups(group_n + 1);
    o().groups[group_n].push(f);
    f.grouped = true;
    return f.group = group_n;
  };

  fix_feature_overlap = function() {
    var all_features, f, f_list, j, l, last_f, last_start, len, len1, name, new_group_index, ref, results;
    o().groups = [];
    all_features = [];
    ref = o().features_displayed;
    for (name in ref) {
      f_list = ref[name];
      for (j = 0, len = f_list.length; j < len; j++) {
        f = f_list[j];
        if (f.type === 'point') {
          all_features.push(f);
        }
      }
    }
    all_features.sort(function(a, b) {
      return a.at - b.at;
    });
    last_start = void 0;
    last_f = void 0;
    results = [];
    for (l = 0, len1 = all_features.length; l < len1; l++) {
      f = all_features[l];
      if (last_start !== void 0) {
        if (angle_from_bp(f.at) - last_start < p('min_angular_dist')) {
          group_feature(f, o().groups.length - 1);
        } else {
          last_start = void 0;
          group_feature(f, -1);
        }
      } else {
        if (last_f !== void 0) {
          if (angle_from_bp(f.at) - angle_from_bp(last_f.at) < p('min_angular_dist')) {
            last_start = angle_from_bp(last_f.at);
            new_group_index = o().groups.length;
            group_feature(last_f, new_group_index);
            group_feature(f, new_group_index);
          } else {
            group_feature(f, -1);
          }
        }
      }
      results.push(last_f = f);
    }
    return results;
  };

  add_hidden_feature = function(name, f) {
    if (o()['features_not_displayed'][name] === void 0) {
      o()['features_not_displayed'][name] = [];
    }
    return o()['features_not_displayed'][name].push(f);
  };

  show_feature = function(name) {
    var f, j, len, ref;
    if (o()['features_displayed'][name] === void 0) {
      o()['features_displayed'][name] = [];
    }
    if (o()['features_not_displayed'][name] !== void 0) {
      ref = o()['features_not_displayed'][name];
      for (j = 0, len = ref.length; j < len; j++) {
        f = ref[j];
        o()['features_displayed'][name].push(f);
      }
      return o()['features_not_displayed'][name] = [];
    }
  };

  hide_feature = function(name) {
    var f, j, len, ref;
    if (o()['features_displayed'][name] !== void 0) {
      ref = o()['features_displayed'][name];
      for (j = 0, len = ref.length; j < len; j++) {
        f = ref[j];
        o()['features_not_displayed'][name].push(f);
      }
      return delete o()['features_displayed'][name];
    }
  };

  set_feature_from_field = function(visible) {
    var name;
    name = $(p().dyn_enz_field).val();
    if (visible) {
      show_feature(name);
    } else {
      hide_feature(name);
    }
    return redraw_map();
  };

  add_feature_from_field = function() {
    return set_feature_from_field(true);
  };

  hide_feature_from_field = function() {
    return set_feature_from_field(false);
  };

  read_data = function() {
    var data;
    data = JSON.parse($(p('plas_map_div_id')).attr(p('data_attr')));
    return data;
  };

  add_all_features = function(f_collection) {
    var f, f_list, name, results;
    results = [];
    for (name in f_collection) {
      f_list = f_collection[name];
      results.push((function() {
        var j, len, results1;
        results1 = [];
        for (j = 0, len = f_list.length; j < len; j++) {
          f = f_list[j];
          results1.push(add_hidden_feature(name, f));
        }
        return results1;
      })());
    }
    return results;
  };

  show_initial_features = function() {
    var always_on, f, n, ref, results;
    always_on = p('initially_displayed_enzymes');
    ref = o().features_not_displayed;
    results = [];
    for (n in ref) {
      f = ref[n];
      if (indexOf.call(always_on, n) >= 0) {
        results.push(show_feature(n, false));
      } else if (f.length > 0 && f[0].type === 'point' && enzymes_to_show.indexOf(f[0].text) < 0) {
        results.push(hide_feature(n));
      } else if (f.length === 1 && f[0].type === 'point') {
        results.push(show_feature(n, false));
      } else if (f.length > 0 && f[0].type === 'regional') {
        results.push(show_feature(n, false));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  initialize_features = function() {
    var fs;
    fs = read_data();
    o().data = fs;
    o().features_displayed = {};
    o().features_not_displayed = {};
    p().pl_size = fs.pl_size;
    p().pl_name = fs.pl_name;
    add_all_features(fs['point_features']);
    add_all_features(fs['regional_features']);
    return show_initial_features();
  };

  initialize_buttons = function() {
    $(p('enz_remove_button')).click(hide_feature_from_field);
    return $(p('enz_add_button')).click(add_feature_from_field);
  };

  do_map = function() {
    clear_map();
    initialize_features();
    initialize_buttons();
    return draw_all();
  };

  module.exports = do_map;

}).call(this);
